version: "3.8"

networks:
  word_count_2:
    driver: bridge
volumes:
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  druid_shared: {}
  overlord_var: {}
services:
  # Hadoop HDFS
  namenode:
    image: apache/hadoop:3.3.6
    container_name: namenode
    hostname: namenode
    command: ["hdfs", "namenode"]
    env_file:
      - ./config
    ports:
      - "9870:9870" # NameNode Web UI
    environment:
      ENSURE_NAMENODE_DIR: "/tmp/hadoop-hadoop/dfs/name"
    networks:
      - word_count_2

  datanode1:
    image: apache/hadoop:3.3.6
    container_name: datanode1
    command: ["hdfs", "datanode"]
    env_file:
      - ./config
    depends_on:
      - namenode
    networks:
      - word_count_2

  datanode2:
    image: apache/hadoop:3.3.6
    container_name: datanode2
    command: ["hdfs", "datanode"]
    env_file:
      - ./config
    depends_on:
      - namenode
    networks:
      - word_count_2

  # Spark Standalone
  spark-master:
    image: bitnami/spark:3.4.1
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_WEBUI_PORT=8080
    ports:
      - "8080:8080"
      - "7077:7077"
      - "10000:10000"
    networks:
      - word_count_2

  spark-worker1:
    image: bitnami/spark:3.4.1
    container_name: spark-worker1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    ports:
      - "8081:8081" # Spark Worker1 Web UI
    networks:
      - word_count_2

  spark-worker2:
    image: bitnami/spark:3.4.1
    container_name: spark-worker2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    ports:
      - "8082:8081" # Spark Worker2 Web UI
    networks:
      - word_count_2
  # Kafka and Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT= 2181
      - ZOO_MY_ID=1
    networks:
      - word_count_2

  kafka1:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka1
    ports:
      - "8097:8097"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:8097,INTERNAL://kafka1:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - word_count_2

  kafka2:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka2
    ports:
      - "8098:8098"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:8098,INTERNAL://kafka2:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - word_count_2

  kafka3:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka3
    ports:
      - "8099:8099"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:8099,INTERNAL://kafka3:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - word_count_2

  # Superset
  superset:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: superset
    ports:
      - "8088:8088"
    environment:
      SUPERSET_WEBSERVER_PORT: 8088
    volumes:
      - ./superset:/app/superset_home
      - ./superset_config.py:/app/pythonpath/superset_config.py
    depends_on:
      - db
    networks:
      - word_count_2

  python_app:
    build:
      context: ./pythonProject/
    container_name: flask_app
    ports:
      - "5000:5000"
    networks:
      - word_count_2

  db:
    image: postgres:15
    container_name: superset-db
    environment:
      POSTGRES_USER: superset
      POSTGRES_PASSWORD: superset
      POSTGRES_DB: superset
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - word_count_2

  # Apache Druid
  coordinator:
    image: apache/druid:31.0.0
    container_name: coordinator
    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
    depends_on:
      - zookeeper
      - db
    ports:
      - "8071:8081"
    command:
      - coordinator
    env_file:
      - environment
    networks:
      - word_count_2

  broker:
    image: apache/druid:31.0.0
    container_name: broker
    volumes:
      - broker_var:/opt/druid/var
    depends_on:
      - zookeeper
      - db
      - coordinator
    ports:
      - "8072:8082"
    command:
      - broker
    env_file:
      - environment
    networks:
      - word_count_2

  historical:
    image: apache/druid:31.0.0
    container_name: historical
    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
    depends_on:
      - zookeeper
      - db
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical
    env_file:
      - environment
    networks:
      - word_count_2
  overlord:
    image: apache/druid:31.0.0
    container_name: overlord
    volumes:
      - druid_shared:/opt/shared
      - overlord_var:/opt/druid/var
    depends_on:
      - zookeeper
      - db
      - coordinator
    ports:
      - "8090:8090"
    command:
      - historical
    env_file:
      - environment
    networks:
      - word_count_2

  middlemanager:
    image: apache/druid:31.0.0
    container_name: middlemanager
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
    depends_on:
      - zookeeper
      - db
      - coordinator
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    command:
      - middleManager
    env_file:
      - environment
    networks:
      - word_count_2

  router:
    image: apache/druid:31.0.0
    container_name: router
    volumes:
      - router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - db
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - environment
    networks:
      - word_count_2